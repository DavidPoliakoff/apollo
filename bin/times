#!/usr/bin/env python3
import sys

from rlsl.util.sciload import NumpyLoader
from rlsl.stats.best import *
import rlsl.util.dtypes

from rlsl.viz.line import plot_lines


def print_times(label, times):
    print label
    for t in times:
        print t


def sanity_check_sizes(serial, omp, cilk, best, sizes):
    for size in sizes:
        reflen = len(serial[size])
        if not all(len(x) == reflen for x in [omp[size], cilk[size], best[size]]):
            print 'SIZE NO MATCH!'
            sys.exit(1)


def print_percentage_improvements(sizes, serial, best, *args):
    print 'Size', 'Improvement(best)', 'Improvement(serial)'

    for items in [list(times) for times in zip(sizes, serial, best, *args)]:
        size = items[0]
        s = items[1]
        b = items[2]
        others = items[3:]

        best_single_policy = min(s, *others)

        improvement = 100.0 - (b/best_single_policy*100.0)
        serial_improvement = 100.0 - (b/s*100.0)

        print size, improvement, serial_improvement


def main():
    data_file = sys.argv[1]
    loader = NumpyLoader(data_file, rlsl.util.dtypes.LULESH_DTYPE)

    data = loader.get_data()

    sizes = np.sort(np.unique(data['problem size']))

    # Serial times, map of size to array of per-loop times
    serial_times = {size : get_times(data, size, {'inner':'SEG_SEQ', 'outer':'SEGIT_SEQ'}) 
            for size in sizes}

    # OpenMP times, map of size to array of per-loop times
    omp_times = {size : get_times(data, size, {'inner':'SEG_OMP', 'outer':'SEGIT_SEQ'}) 
            for size in sizes}

    # OpenMP times, map of size to array of per-loop times
    omp_both_times = {size : get_times(data, size, {'inner':'SEG_OMP', 'outer':'SEGIT_OMP'}) 
            for size in sizes}

    # OpenMP times, map of size to array of per-loop times
    omp_outer_times = {size : get_times(data, size, {'inner':'SEG_SEQ', 'outer':'SEGIT_OMP'}) 
            for size in sizes}

    # Cilk times, map of size to array of per-loop times
    cilk_times = {size : get_times(data, size, {'inner':'SEG_CILK', 'outer':'SEGIT_SEQ'}) 
            for size in sizes}

    # Cilk times, map of size to array of per-loop times
    cilk_both_times = {size : get_times(data, size, {'inner':'SEG_CILK', 'outer':'SEGIT_CILK'}) 
            for size in sizes}

    # Cilk times, map of size to array of per-loop times
    cilk_outer_times = {size : get_times(data, size, {'inner':'SEG_SEQ', 'outer':'SEGIT_CILK'}) 
            for size in sizes}

    # Best times, map of size to array of per-loop times
    best_times = {size : get_best_time(data, size) for size in sizes}
    #best_labels = {size : get_best_label(data, size) for size in sizes}

    sanity_check_sizes(serial_times, omp_times, cilk_times, best_times, sizes)

    serial = [np.sum(serial_times[size]) for size in sizes]
    omp = [np.sum(omp_times[size]) for size in sizes]
    omp_outer = [np.sum(omp_outer_times[size]) for size in sizes]
    omp_both = [np.sum(omp_both_times[size]) for size in sizes]
    cilk = [np.sum(cilk_times[size]) for size in sizes]
    cilk_outer = [np.sum(cilk_outer_times[size]) for size in sizes]
    cilk_both = [np.sum(cilk_both_times[size]) for size in sizes]
    best = [np.sum(best_times[size]) for size in sizes]

    print "Size Serial OpenMP Cilk OpenMP-inner OpenMP-outer Cilk-inner Cilk-outer Optimal"
    for i, size in enumerate(sizes):
        print '%s %f %f %f %f %f %f %f %f' % (
                size, serial[i], omp_both[i], cilk_both[i], omp[i], omp_outer[i], cilk[i], cilk_outer[i], best[i])


    plot_lines('Problem Size', 'Runtime (s)',
            ['Serial', 'OpenMP', 'Cilk', 'OpenMP Inner', 'OpenMP Outer', 'Cilk Inner', 'Cilk Outer', 'Optimal'],
            "all.pdf",
            sizes,
            serial,
            omp_both,
            cilk_both,
            omp,
            omp_outer,
            cilk,
            cilk_outer,
            best)

    plot_lines('Problem Size', 'Runtime (s)',
            ['OpenMP', 'Cilk', 'Optimal'],
            "no-serial.pdf",
            sizes,
            omp_outer,
            cilk_outer,
            best)

    print_percentage_improvements(sizes, serial, best, omp, cilk, omp_both,
            cilk_both, omp_outer, cilk_outer)

    return 0

if __name__ == "__main__":
    sys.exit(main())
