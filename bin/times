#!/usr/bin/env python
import sys

from rlsl.util.sciload import SciLoader
from rlsl.stats.best import *
import rlsl.util.dtypes

from rlsl.viz.line import plot_lines


def print_times(label, times):
    print label
    for t in times:
        print t


def sanity_check_sizes(serial, omp, cilk, best, sizes):
    for size in sizes:
        reflen = len(serial[size])
        if not all(len(x) == reflen for x in [omp[size], cilk[size], best[size]]):
            print 'SIZE NO MATCH!'
            sys.exit(1)



def print_percentage_improvements(serial, omp, cilk, best, sizes):
    print 'Size', 'Improvement(best)', 'Improvement(serial)'
    for s, o, c, b, size in zip(serial, omp, cilk, best, sizes):
        best_single_policy = min(s, o, c)

        improvement = 100.0 - (b/best_single_policy*100.0)
        serial_improvement = 100.0 - (b/s*100.0)

        print size, improvement, serial_improvement


data_file = sys.argv[1]
sciloader = SciLoader(data_file, rlsl.util.dtypes.LULESH_DTYPE)

data = sciloader.get_data()

sizes = np.sort(np.unique(data['problem size']))

# Serial times, map of size to array of per-loop times
serial_times = {size : get_times(data, size, {'inner':'SEG_SEQ', 'outer':'SEGIT_SEQ'}) 
        for size in sizes}

# OpenMP times, map of size to array of per-loop times
omp_times = {size : get_times(data, size, {'inner':'SEG_OMP', 'outer':'SEGIT_SEQ'}) 
        for size in sizes}

# Cilk times, map of size to array of per-loop times
cilk_times = {size : get_times(data, size, {'inner':'SEG_CILK', 'outer':'SEGIT_SEQ'}) 
        for size in sizes}

# Best times, map of size to array of per-loop times
best_times = {size : get_best_time(data, size) for size in sizes}

sanity_check_sizes(serial_times, omp_times, cilk_times, best_times, sizes)

serial = [np.sum(serial_times[size]) for size in sizes]
omp = [np.sum(omp_times[size]) for size in sizes]
cilk = [np.sum(cilk_times[size]) for size in sizes]
best = [np.sum(best_times[size]) for size in sizes]

plot_lines('Problem Size', 'Runtime (s)',
        ['Serial', 'OpenMP', 'Cilk', 'Optimal'],
        "all.pdf",
        sizes,
        serial,
        omp,
        cilk,
        best)

plot_lines('Problem Size', 'Runtime (s)',
        ['OpenMP', 'Cilk', 'Optimal'],
        "no-serial.pdf",
        sizes,
        omp,
        cilk,
        best)

print_percentage_improvements(serial, omp, cilk, best, sizes)
